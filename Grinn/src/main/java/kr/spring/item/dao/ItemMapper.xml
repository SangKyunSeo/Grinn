<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.item.dao.ItemMapper">

	<!-- 상품 등록 -->
	<insert id="insertItem" parameterType="itemVO">
		INSERT INTO item(
		item_num,
		item_brand,
		item_name,
		item_detail,
		item_model,
		item_date,
		item_price,
		<!-- 
		<if test="item_keyword1!=null and item_keyword1!=''">
			item_keyword1,
		</if>
		<if test="item_keyword2!=null and item_keyword2!=''">
			item_keyword2,
		</if>
		<if test="item_keyword3!=null or item_keyword3!=''">
			item_keyword3,
		</if> -->
		item_photo1,
		item_photo1name,
		item_cate,
		item_gender,
		item_status
		) VALUES
		(
		item_seq.nextval,
		#{item_brand},
		#{item_name},
		#{item_detail},
		#{item_model},
		#{item_date},
		#{item_price},
		<!-- 
		<if test="item_keyword1!=null and item_keyword1!=''">
			#{item_keyword1},
		</if>
		<if test="item_keyword2!=null and item_keyword2!=''">
			#{item_keyword2},
		</if>
		<if test="item_keyword3!=null or item_keyword3!=''">
			#{item_keyword3},
		</if> -->
		#{item_photo1},
		#{item_photo1name},
		#{item_cate},
		#{item_gender},
		#{item_status})
	</insert>
	<!-- 상품 등록 끝 -->

	<select id="sizeListInfo" resultType="itemVO">
        SELECT
            MIN(sb.sale_price) AS sale,
            isz.item_sizenum,
            isz.item_size
        FROM
            sale_bid sb
        INNER JOIN
            item_size isz ON sb.item_sizenum = isz.item_sizenum
        WHERE
            sb.item_num = #{item_num}
            AND sb.sale_deadline >= SYSDATE
        GROUP BY
            isz.item_sizenum, isz.item_size
    </select>
    
	<sql id="itemCategory">
		<choose>
			<when test="tab == 0">
			</when>
			<when test="tab == 1">
				AND item_cate = 1
			</when><!-- 신발 -->
			<when test="tab == 2">
				AND item_cate = 2
			</when><!-- 상의 -->
			<when test="tab == 3">
				AND item_cate = 3
			</when><!-- 하의 -->
			<when test="tab == 4">
				AND item_cate = 4
			</when><!-- 기타 -->
			
		</choose>
	</sql>

	<sql id="itemSearch">
		<![CDATA[
			WHERE item_status > #{item_status}
		]]>
			<if test="keyword != null and keyword != ''">
				<if test="keyfield == 1"><!-- 상품명+브랜드 -->
					AND  (LOWER(item_name)) LIKE '%' || (LOWER(#{keyword})) || '%' OR (LOWER(item_brand)) LIKE '%' || (LOWER(#{keyword})) || '%'
				</if>
				<if test="keyfield == 2"><!-- 브랜드 -->
					AND (LOWER(item_brand)) LIKE '%' || (LOWER(#{keyword})) || '%'
				</if>
				<if test="keyfield == 3"><!-- 상품명 -->
					AND (LOWER(item_name)) LIKE '%' || (LOWER(#{keyword})) || '%'
				</if>
			</if>
			<include refid="itemCategory"></include>
	</sql>

	<sql id="itemOrder">
		<if test="order == 1"><!-- 최신순 -->
			ORDER BY b.item_num DESC
		</if>
		<if test="order == 2"><!-- 관심상품순 -->
			ORDER BY f.fav_cnt DESC NULLS LAST
		</if>
		<if test="order == 3"><!-- 리뷰순 -->
			ORDER BY r.re_cnt DESC NULLS LAST
		</if>
	</sql>

	<!-- 전체/검색 레코드 수 -->
	<select id="selectRowCount" parameterType="map"
		resultType="integer">
		SELECT COUNT(*) FROM item
		<include refid="itemSearch"></include>
	</select>

	<!-- 전체/검색 목록 -->
	<select id="selectList" parameterType="map" resultType="itemVO">
		SELECT
			* FROM (SELECT a.*, rownum rnum
				FROM(SELECT
					b.*,
					r.re_cnt,
					f.fav_cnt,
					s.sale,
					t.trade_price,
					t.trade_regdate
					FROM item b
			LEFT OUTER JOIN (SELECT count(*) re_cnt, item_num FROM review GROUP BY item_num)r ON b.item_num=r.item_num
			LEFT OUTER JOIN (SELECT count(*) fav_cnt, item_num FROM item_fav GROUP BY item_num)f ON b.item_num=f.item_num
			LEFT OUTER JOIN (SELECT MIN(sale_price) sale, item_num FROM sale_bid 
			<![CDATA[
				WHERE sale_deadline >= SYSDATE
			]]>
			 GROUP BY item_num)s ON b.item_num=s.item_num
			LEFT OUTER JOIN (SELECT td.item_num, td.trade_price, td.trade_regDate FROM trade_detail td JOIN (
                SELECT item_num, MAX(trade_regDate) AS md FROM trade_detail WHERE trade_state=5 GROUP BY item_num) mds ON td.item_num = mds.item_num AND td.trade_regDate = mds.md)t ON b.item_num=t.item_num
			<include refid="itemSearch"></include>
			<include refid="itemOrder"></include>
			)a)
      	<![CDATA[
      		WHERE rnum >= #{start} AND rnum <= #{end}
      	]]>
	</select>

	<!-- 상품 수정 -->
	<update id="updateItem" parameterType="itemVO">
		UPDATE
		item
		SET
		item_brand=#{item_brand},
		item_name=#{item_name},
		item_detail=#{item_detail},
		item_model=#{item_model},
		item_date=#{item_date},
		item_price=#{item_price},
		<!-- <if test="item_keyword1!=null and item_keyword1!=''">
			item_keyword1=#{item_keyword1},
		</if>
		<if test="item_keyword2!=null and item_keyword2!=''">
			item_keyword2=#{item_keyword2},
		</if>
		<if test="item_keyword3!=null or item_keyword3!=''">
			item_keyword3=#{item_keyword3},
		</if>
		<if test="item_photo1.length>0">
			item_photo1=#{item_photo1},
			item_photo1name=#{item_photo1name},
		</if> -->
		item_cate=#{item_cate},
		item_gender=#{item_gender},
		item_status=#{item_status}
		WHERE
		item_num=#{item_num}
	</update>

	<!-- 리뷰 작성 -->
	<insert id="insertReview" parameterType="itemReviewVO">
		INSERT INTO review(
		review_num,
		review_content,
		<if test="review_photo.length>0">
			review_photo,
			review_photoname,
		</if>
		review_date,
		review_star,
		item_num,
		mem_num
		) VALUES (
		review_seq.nextval,
		#{review_content},
		<if test="review_photo.length>0">
			#{review_photo},
			#{review_photoname},
		</if>
		SYSDATE,
		#{review_star},
		#{item_num},
		#{mem_num}
		)
	</insert>

	<!-- 댓글 목록 -->
	<select id="selectListReview" parameterType="map"
		resultType="itemReviewVO">
		SELECT * FROM (SELECT a.*, rownum rnum FROM
		(SELECT review_num,
			<![CDATA[
			REPLACE(REPLACE(review_content,'<','&lt;'),'>','&gt;') review_content,
			]]>
		review_date, review_modifydate,
		review_star,review_photo,review_photoname, item_num, mem_num, mem_id,
		mem_nickname
		FROM review JOIN member USING(mem_num) WHERE item_num=#{item_num}
		ORDER BY review_num DESC)a)
		<![CDATA[
		WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>

	<!-- 댓글 수정 -->
	<update id="updateReview" parameterType="itemReviewVO">
		UPDATE review SET
		review_content = #{review_content},
		<if test="review_photo.length>0">
			review_photo = #{review_photo},
			review_photoname = #{review_photoname},
		</if>
		review_star=#{review_star},
		review_modifydate=SYSDATE
		WHERE
		review_num=#{review_num}
	</update>
	
	<!-- 스타일 전체/검색 레코드수 -->
	<select id="selectRowCountST" parameterType="map" resultType="integer">
		SELECT COUNT(*) FROM style s 
		LEFT OUTER JOIN member m ON s.mem_num = m.mem_num 
		LEFT OUTER JOIN member_detail d ON m.mem_num = d.mem_num
        LEFT OUTER JOIN item i ON (s.item_num1=i.item_num OR s.item_num2=i.item_num OR s.item_num3=i.item_num)
		WHERE item_num=#{item_num} AND (s.st_hide = 0 OR s.st_hide = 1)
	</select>

	
	<!-- 스타일 전체/검색 목록   -->
	<select id="selectListST" parameterType="map" resultType="itemstVO">
		SELECT * FROM (SELECT a.*, rownum rnum FROM
		(SELECT st_num, 		
        <![CDATA[
		REPLACE(REPLACE(st_phrase, '<', '&lt;'), '>', '&gt;') st_phrase,
		]]>
		s.st_photo1n, s.mem_num, s.item_num1, s.item_num2, s.item_num3, m.mem_id, d.mem_photo
		FROM style s LEFT OUTER JOIN member m ON s.mem_num = m.mem_num 
		LEFT OUTER JOIN member_detail d ON m.mem_num = d.mem_num 
        LEFT OUTER JOIN item i ON (s.item_num1=i.item_num OR s.item_num2=i.item_num OR s.item_num3=i.item_num)
		WHERE item_num=#{item_num} AND (s.st_hide = 0 OR s.st_hide = 1)
        ORDER BY st_num DESC)a)
		<![CDATA[
		 WHERE rnum >= #{start} AND rnum <= #{end}
		]]>
	</select>
	
	
	<select id="saleList" parameterType="map" resultType="itemTradeVO">
		SELECT
			NVL(ps.item_size,'ONESIZE')item_size,
			ps.sale_price,
			COUNT(*) AS sale_cnt
		FROM (
			SELECT
				sb.item_sizenum,
				isz.item_size,
				sb.sale_price
			FROM sale_bid sb
				INNER JOIN item_size isz ON sb.item_sizenum = isz.item_sizenum
			WHERE sb.item_num=#{item_num} AND sale_deadline >= SYSDATE
		) ps
		GROUP BY ps.item_sizenum, ps.item_size, ps.sale_price
		ORDER BY ps.item_sizenum, ps.sale_price
	</select>
	
	<select id="purchaseList" parameterType="map" resultType="itemTradeVO">
		SELECT
		    NVL(ps.item_size,'ONESIZE')item_size,
		    ps.purchase_price,
		    COUNT(*) AS purchase_cnt
		FROM (
		    SELECT
		        pb.item_sizenum,
		        isz.item_size,
		        pb.purchase_price
		    FROM purchase_bid pb
		    INNER JOIN item_size isz ON pb.item_sizenum = isz.item_sizenum
		    WHERE pb.item_num = #{item_num} AND purchase_deadline >= SYSDATE
		) ps
		GROUP BY ps.item_sizenum, ps.item_size, ps.purchase_price
		ORDER BY ps.item_sizenum, ps.purchase_price
	</select>
	
	
	<select id = "selectSearchItem" parameterType = "string" resultType = "itemVO">
		SELECT item_num, item_brand, item_name 
		FROM item 
		WHERE item_status = 2 AND UPPER(item_name) LIKE '%' || UPPER(#{item_name}) || '%'
	</select>
	
	
</mapper>